import numpy as np
import getopt
import sys
import os
import random

read_ports   = 2
write_ports  = 2
word_size    = 32
size         = 4096
op_file_name = "xor_2r_2w"

argumentList = sys.argv[1:]
options      = "hr:w:d:s:o:"
long_options = ["help",'read-ports=','write-ports=','word-size=','size=','output=']
try:
    args,vals = getopt.getopt(argumentList,options,long_options)
    for arg,val in args:
        if arg in ("-h","--help"):
            print("""
XOR Memory Generator (Optons and Arguments)

-h  --help          Output Help
-r  --read-port     Number of Read Ports
-w  --write-port    Number of Write Ports
-d  --word-size     Word Size in Bits
-s  --size          Memory Size in Bytes
-o  --output        Output File Name
            """)
        elif arg in ("-r","--read-ports"):
            read_ports =  int(val)
            # print(type(read_ports))
            assert read_ports > 1, f"number greater than 1 expected, got: {read_ports}"
        elif arg in ("-w","--write-ports"):
            write_ports = int(val)
            assert write_ports  > 1, f"number greater than 1 expected, got: {write_ports}"
        elif arg in ("-d","--word-size"):
            size        = int(val)
        elif arg in ("-s","--size"):
            size        = int(val)
        elif arg in ("-o","--output"):
            op_file_name = str(val)
except getopt.error as err:
        print (str(err))
        exit()





r_top_ports = str('')
ra_top_ports = str('')
for i in range(0,read_ports):
    r_top_ports = r_top_ports + 'o_r' + str((i+1)) + ','
    ra_top_ports = ra_top_ports + 'i_ra' + str((i + 1)) + ','

w_top_ports = str('')
wa_top_ports = str('')

for i in range(0,write_ports):
    w_top_ports = w_top_ports + 'i_w' + str((i+1)) + ','
    wa_top_ports = wa_top_ports + 'i_wa' + str((i + 1)) + ','

split_w_top_ports = w_top_ports.split(sep=',')
split_wa_top_ports = wa_top_ports.split(sep=',')
split_r_top_ports = r_top_ports.split(sep=',')
split_ra_top_ports = ra_top_ports.split(sep=',')


if not os.path.isdir('./generate/tb'):
    os.mkdir('./generate/tb')

with open(f"./generate/tb/{op_file_name}_tb.v",'w') as file:
        address_width = int(np.ceil(np.log2(size/(word_size/8))))
        data_width    = word_size
        file.write(f"//Generated by XOR-Memory Generator\n"
               f"//LICENSED for use by https://github.com/aaqdas\n")
        file.write(f"module {op_file_name}_tb;\n")
        
        file.write(f"reg clk;\n")
        file.write(f"reg [{write_ports-1}:0] i_enW;\n")
        for i in range(0,read_ports):
            file.write(f"reg [({address_width}-1):0] {split_ra_top_ports[i]};\n")
            file.write(f"wire [({data_width}-1):0] {split_r_top_ports[i]};\n")
        for i in range(0,write_ports):
            file.write(f"reg [({address_width}-1):0] {split_wa_top_ports[i]};\n")
            file.write(f"reg [({data_width}-1):0]    {split_w_top_ports[i]};\n")

        file.write(f"{op_file_name} uut(\n"
                   f".clk(clk)\n"
                   f",.i_enW(i_enW)\n")
        for i in range(0,read_ports):
            file.write(f",.{split_ra_top_ports[i]}({split_ra_top_ports[i]})\n")
            file.write(f",.{split_r_top_ports[i]}({split_r_top_ports[i]})\n")
        for i in range(0,write_ports):
            file.write(f",.{split_wa_top_ports[i]}({split_wa_top_ports[i]})\n")
            file.write(f",.{split_w_top_ports[i]}({split_w_top_ports[i]})\n")
        file.write(f");\n")

        file.write(f"initial clk = 0;\n"
                   f"always #10 clk = ~clk;\n"
                   f"\n"
                   f"initial\n"
                   f"begin\n")

        port_addresses = list()

        for i in range(0,max(read_ports,write_ports)):
            # print(type(random.getrandbits(address_width)))
            port_addresses = port_addresses + [random.getrandbits(address_width)]

        if read_ports < write_ports:
            for i in range(0,write_ports):
                file.write(f"{split_wa_top_ports[i]} = {port_addresses[i]};\n")
                file.write(f"{split_w_top_ports[i]}  = {random.getrandbits(data_width)};\n")
            file.write(f"#20;")
            for i in range(0,write_ports):
                if(i == read_ports - 1): file.write(f"#20;")
                file.write(f"{split_ra_top_ports[i]} = {port_addresses[i]};\n")
        else:
            for i in range(0,read_ports):
                if(i == write_ports - 1): file.write(f"#20;\n")
                file.write(f"{split_wa_top_ports[i]} = {port_addresses[i]};\n")
                file.write(f"{split_w_top_ports[i]}  = {random.getrandbits(data_width)};\n")
            file.write(f"#20;\n")
            for i in range(0,read_ports):
                file.write(f"{split_ra_top_ports[i]} = {port_addresses[i]};\n")
        file.write(f"end\nendmodule")
            


